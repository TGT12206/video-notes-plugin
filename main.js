/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VideoNote
});
module.exports = __toCommonJS(main_exports);

// video-note-view.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE_VIDEO_NOTE = "video-note";
var VIDEO_NOTE_EXTENSION = "vnote";
var VideoNoteView = class extends import_obsidian.TextFileView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_VIDEO_NOTE;
  }
  async onLoadFile(file) {
    this.currentFileName = file.basename;
    super.onLoadFile(file);
  }
  async onRename(file) {
    this.currentFileName = file.basename;
  }
  getDisplayText() {
    return this.currentFileName;
  }
  async setViewData(data, clear) {
    await this.Display(data);
  }
  getViewData() {
    return JSON.stringify(this.dataToSave);
  }
  clear() {
    return;
  }
  async Display(data) {
    this.contentEl.empty();
    this.dataToSave = JSON.parse(data);
    this.dataToSave.notes.sort((a, b) => {
      return a.time - b.time;
    });
    const path = this.dataToSave.videoPath;
    const mainDiv = this.contentEl.createDiv("video-note-main-div vbox");
    const pathInput = mainDiv.createEl("input", { type: "text", value: path });
    const videoEl = mainDiv.createEl("video");
    this.DisplayCustomVideoControls(videoEl, mainDiv.createDiv());
    const tFile = this.app.vault.getFileByPath(path);
    if (tFile === null) {
      new import_obsidian.Notice("Video was not found!");
      console.log("Video at path " + path + " was not found!");
    } else {
      const arrayBuffer = await this.app.vault.readBinary(tFile);
      const blob = new Blob([arrayBuffer]);
      const mediaUrl = URL.createObjectURL(blob);
      videoEl.src = mediaUrl;
    }
    videoEl.className = "video-note-video";
    this.registerDomEvent(pathInput, "change", () => {
      this.dataToSave.videoPath = pathInput.value;
      videoEl.src = pathInput.value;
      videoEl.currentTime = 0;
      currTime = 0;
      currentIndex = 0;
    });
    let currTime = 0;
    let currentIndex = 0;
    const notesListDiv = mainDiv.createDiv("video-notes-list-wrapper vbox");
    const refreshTextAreaHeight = (textarea) => {
      textarea.style.height = "auto";
      textarea.style.height = textarea.scrollHeight + "px";
    };
    let noteDivs = [];
    const displayNotes = () => {
      notesListDiv.empty();
      noteDivs = [];
      const notesDiv = notesListDiv.createDiv("video-notes-list vbox");
      for (let i = 0; i < this.dataToSave.notes.length; i++) {
        const index = i;
        const noteDiv = notesDiv.createDiv("hbox video-note");
        if (index === currentIndex) {
          noteDiv.classList.add("video-note-highlighted");
        }
        const currNote = this.dataToSave.notes[i];
        const deleteButton = noteDiv.createEl("button");
        const noteInput = noteDiv.createEl("textarea", { text: currNote.note });
        const setTime = noteDiv.createEl("button");
        const goToTime = noteDiv.createEl("button");
        (0, import_obsidian.setIcon)(deleteButton, "trash-2");
        (0, import_obsidian.setIcon)(setTime, "flag-triangle-right");
        (0, import_obsidian.setIcon)(goToTime, "play");
        deleteButton.className = "remove-button";
        noteInput.className = "video-note-input";
        this.registerDomEvent(deleteButton, "click", () => {
          this.dataToSave.notes.splice(index, 1);
          displayNotes();
          if (currentIndex === index && index > 0) {
            currentIndex--;
          }
        });
        this.registerDomEvent(setTime, "click", () => {
          this.dataToSave.notes[i].time = currTime;
        });
        this.registerDomEvent(goToTime, "click", () => {
          videoEl.currentTime = currNote.time;
          currTime = currNote.time;
        });
        this.registerDomEvent(noteInput, "input", () => {
          refreshTextAreaHeight(noteInput);
        });
        this.registerDomEvent(noteInput, "change", () => {
          this.dataToSave.notes[i].note = noteInput.value;
        });
        refreshTextAreaHeight(noteInput);
        noteDivs.push(noteDiv);
      }
      const addButton = notesListDiv.createEl("button", { text: "+" });
      addButton.className = "add-button";
      this.registerDomEvent(addButton, "click", () => {
        this.dataToSave.notes.push({ time: currTime, note: "" });
        this.dataToSave.notes.sort((a, b) => {
          return a.time - b.time;
        });
        displayNotes();
        findCurrntNoteAndHighlight(true);
      });
    };
    const findCurrntNoteAndHighlight = (forciblyScroll) => {
      currTime = videoEl.currentTime;
      const oldIndex = currentIndex;
      let found = false;
      for (let i = this.dataToSave.notes.length - 1; !found && i >= 0; i--) {
        if (currTime >= this.dataToSave.notes[i].time) {
          currentIndex = i;
          found = true;
        }
      }
      if (!found) {
        currentIndex = 0;
      }
      if (oldIndex != currentIndex) {
        noteDivs[oldIndex].removeClass("video-note-highlighted");
        noteDivs[currentIndex].addClass("video-note-highlighted");
        noteDivs[currentIndex].scrollIntoView();
      }
    };
    this.registerDomEvent(videoEl, "timeupdate", () => {
      findCurrntNoteAndHighlight(false);
    });
    displayNotes();
  }
  DisplayCustomVideoControls(vid, controlsDiv) {
    controlsDiv.className = "video-note-controls vbox";
    const topControls = controlsDiv.createDiv("video-note-top-controls hbox");
    const leftControls = topControls.createDiv("video-note-left-controls hbox");
    const rightControls = topControls.createDiv("video-note-right-controls hbox");
    const timeSlider = controlsDiv.createEl("input", { type: "range" });
    timeSlider.min = "0";
    timeSlider.max = vid.duration + "";
    timeSlider.className = "video-time-slider";
    timeSlider.step = "0.01";
    vid.controls = true;
    vid.autoplay = true;
    vid.loop = true;
    let skipAmt = 1;
    const back = leftControls.createEl("button");
    const play = leftControls.createEl("button");
    const forward = leftControls.createEl("button");
    (0, import_obsidian.setIcon)(back, "arrow-big-left-dash");
    (0, import_obsidian.setIcon)(play, "pause");
    (0, import_obsidian.setIcon)(forward, "arrow-big-right-dash");
    this.registerDomEvent(back, "click", () => {
      const newTime = vid.currentTime - skipAmt;
      if (newTime >= 0) {
        vid.currentTime = newTime;
      }
    });
    this.registerDomEvent(forward, "click", () => {
      const newTime = vid.currentTime + skipAmt;
      if (newTime <= vid.duration) {
        vid.currentTime = newTime;
      }
    });
    this.registerDomEvent(play, "click", () => {
      const nowPlaying = vid.paused;
      nowPlaying ? vid.play() : vid.pause();
      play.empty();
      (0, import_obsidian.setIcon)(play, nowPlaying ? "pause" : "play");
    });
    const timeText = leftControls.createEl("div", { text: "0 / " + vid.duration });
    const skipAmtIcon = rightControls.createDiv();
    const skipAmtInput = rightControls.createEl("input", { type: "text", value: "1" });
    const playbackSpeedIcon = rightControls.createDiv();
    const playbackSpeedInput = rightControls.createEl("input", { type: "text", value: "1" });
    const loopButton = rightControls.createEl("button");
    (0, import_obsidian.setIcon)(skipAmtIcon, "arrow-left-right");
    (0, import_obsidian.setIcon)(playbackSpeedIcon, "gauge");
    (0, import_obsidian.setIcon)(loopButton, "refresh-cw-off");
    this.registerDomEvent(skipAmtInput, "change", () => {
      skipAmt = parseFloat(skipAmtInput.value);
    });
    this.registerDomEvent(playbackSpeedInput, "change", () => {
      vid.playbackRate = parseFloat(playbackSpeedInput.value);
    });
    this.registerDomEvent(loopButton, "click", () => {
      vid.loop = !vid.loop;
      loopButton.empty();
      (0, import_obsidian.setIcon)(loopButton, vid.loop ? "refresh-cw-off" : "repeat");
    });
    this.registerDomEvent(timeSlider, "input", () => {
      vid.currentTime = parseFloat(timeSlider.value);
    });
    this.registerDomEvent(vid, "timeupdate", () => {
      const currTime = vid.currentTime;
      const currDur = vid.duration;
      timeSlider.value = currTime + "";
      timeSlider.max = currDur + "";
      let roundedTime = Math.floor(currTime);
      let roundedDur = Math.floor(currDur);
      const timeDecimals = currTime - roundedTime;
      const durDecimals = currDur - roundedDur;
      const timeHrs = Math.floor(roundedTime / 3600);
      const durHrs = Math.floor(roundedDur / 3600);
      roundedTime -= timeHrs * 3600;
      roundedDur -= durHrs * 3600;
      const timeMins = Math.floor(roundedTime / 60);
      const durMins = Math.floor(roundedDur / 60);
      roundedTime -= timeHrs * 3600 + timeMins * 60;
      roundedDur -= durHrs * 3600 + durMins * 60;
      const timeSecs = roundedTime + timeDecimals;
      const durSecs = roundedDur + durDecimals;
      const formattedTime = (durHrs > 0 ? (timeHrs < 10 ? "0" : "") + timeHrs + ":" : "") + (durMins > 0 ? (timeMins < 10 ? "0" : "") + timeMins + ":" : "") + (timeSecs < 10 ? "0" : "") + timeSecs.toFixed(2) + " / " + (durHrs > 0 ? (durHrs < 10 ? "0" : "") + durHrs + ":" : "") + (durMins > 0 ? (durMins < 10 ? "0" : "") + durMins + ":" : "") + (durSecs < 10 ? "0" : "") + durSecs.toFixed(2);
      timeText.textContent = formattedTime;
    });
  }
};
var VideoNoteDTO = class {
  constructor() {
    this.videoPath = "";
    this.notes = [];
  }
};

// main.ts
var import_obsidian2 = require("obsidian");
var VideoNote = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerView(
      VIEW_TYPE_VIDEO_NOTE,
      (leaf) => new VideoNoteView(leaf)
    );
    this.registerExtensions([VIDEO_NOTE_EXTENSION], VIEW_TYPE_VIDEO_NOTE);
    this.addCommand({
      id: "new-video-note",
      name: "Create New Video Note",
      callback: async () => {
        const newFile = await this.app.vault.create("Untitled." + VIDEO_NOTE_EXTENSION, JSON.stringify(new VideoNoteDTO()));
        this.app.workspace.getLeaf("tab").openFile(newFile);
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("New Video Note").setIcon("play").onClick(async () => {
            const newFile = await this.app.vault.create((file.parent === null ? "" : file.parent.path + "/") + "Untitled." + VIDEO_NOTE_EXTENSION, JSON.stringify(new VideoNoteDTO()));
            this.app.workspace.getLeaf("tab").openFile(newFile);
          });
        });
      })
    );
  }
  onunload() {
  }
  async activateView(view_type) {
    const { workspace } = this.app;
    let leaf = null;
    leaf = workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian2.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    await leaf.setViewState({ type: view_type, active: true });
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,
